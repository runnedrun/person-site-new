---
description: This rule is used whenever you would create a new page in this NextJS app.
globs: 
alwaysApply: false
---

# Structure

This app uses the app directory, so please create all new pages in that directory.

Any new files related to the new page, including new components, helpers etc, should, unless they are likely to be shared accross pages, be in the same folder as the page.ts file.

If there is logic shared accross files and it is a react component you can put it either in @/components/shared, if it is a hook, put it in @/hooks/shared, otherwise put it in @/helpers/.

# Getting data from the DB into a page.
When we make new pages we use a special setup, along with helper methods, to make it easy to use the same data fetching logic for the intitial fetch on the server as for the real time listeners which are mounted on the client.
Here are the steps you must take:

## Step 1) Create Data Functions object
Every page should have an associated dataFns object in it's own file. This function returns a map like { [dataName]: $dataObservable }. Here is an example:

// [pageName]/[pageName]DataFunctions.ts
import { dataFn } from "@/data/dataFn"
import { map } from "rxjs"

const defaultParams = {
  isUppercase: false,
}

export const examplePageDataFunctions = {
  exampleData: dataFn(defaultParams, ({ getParam }) => {
    const $isUppercase = getParam("isUppercase")
    return {
      title: $isUppercase.pipe(
        map((isUppercase) =>
          isUppercase ? "THIS IS A PIECE OF DATA" : "this is a piece of data"
        )
      ),
    }
  }),
}


Note that each data function in the map of data fns MUST be a specially constructed function, built using the dataFn method shown above. The first argument is the the default query or path parameters that this data relies on. The second is a function that returns a map of observables. 

This file MUST export an object called [pageName]DataFunctions, which has, as a single property, [pageName]Data: [pageName]DataFn. In the future other, shared, data functions might be added to this map, for instance a function that fetches information for the logged in user. 

## Step 2) create page.tsx 
This is a simple file which just exports the result of @rootComponent.tsx , which provides data from the given data function to the given ServerDataReceiver component. This file is the only server component we use. rootComponent is a HOC which builds a component that fetches all the data from the given data functions, then returns it to the child component as the prop _initialValues. We'll create that child component next. It will be in charge of providing the given data via a context, to all it's ancestors components. Here is an example or page.tsx:

// [pageName]/page.tsx
import { rootComponent } from "@/data/rootComponent"
import { examplePageDataFunctions } from "./examplePageDataFunctions"
import { ExamplePageClientDataProviders } from "./ExamplePageClientDataProviders"

const ExamplePage = rootComponent(
  examplePageDataFunctions,
  ExamplePageClientDataProviders
)

export default ExamplePage


## Step 3) create [pageName]ClientDataProviders.tsx
This file will ingest the data that was prefetched by the rootComponent in page.tsx, and then simply pass it to a react Context provider, to be used in other display components. This is a "use client" file. Here is an example:

// [pageName]/[pageName]ClientDataProviders.tsx
"use client"
import { buildDataContext } from "@/data/context/buildDataContext"
import { examplePageDataFunctions } from "./examplePageDataFunctions"
import { ServerDataReceiverComponent } from "@/data/ServerDataReceiverComponent"
import { useContext } from "react"

export const [ExamplePageContext, ProvideExamplePageContext] = buildDataContext(
  examplePageDataFunctions.exampleData
)

const ExampleDisplay = () => {
  const { title } = useContext(ExamplePageContext)
  return <div>{title}</div>
}

export const ExamplePageClientDataProviders: ServerDataReceiverComponent<
  typeof examplePageDataFunctions
> = ({ params, _initialValues }) => {
  return (
    <ProvideExamplePageContext
      params={params}
      _initialValues={_initialValues?.exampleData}
    >
      <ExampleDisplay></ExampleDisplay>
    </ProvideExamplePageContext>
  )
}


Note that this file MUST contstruct the context and provider for the data fn we created in [pageName]DataFunctions, using the special buildDataContext method. Then it must use that provider, passing in the params and _initialValues that were prefetched in the rootComponent. 