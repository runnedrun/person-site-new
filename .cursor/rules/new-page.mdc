---
description: This rule is used whenever you would create a new page in this NextJS app. 
globs: 
alwaysApply: false
---

# Structure

This app uses the app directory, so please create all new pages in that directory.

Any new files related to the new page, including new components, helpers etc, should, unless they are likely to be shared accross pages, be in the same folder as the page.ts file.

If there is logic shared accross files and it is a react component you can put it either in @/components/shared, if it is a hook, put it in @/hooks/shared, otherwise put it in @/helpers/.

# Page data
When we make new pages we use a special setup, along with helper methods, to make it easy to use the same data fetching logic for the intitial fetch on the server as for the real time listeners which are mounted on the client.

Every new page should, unless otherwise noted have 3 files initially created:

1) page.tsx - a simple file which just exports the result of [rootComponent.tsx](mdc:data/rootComponent.tsx) , which provides data from the given data function to the given ServerDataReceiver component.

2) pageNameDataFunctions (replace pageName) a file that exports an object with the same name as the function, and the object is a Record<string, DataFnType>  , from @dataFn.tsx. That object maps namespaces to fns which themselves return an object mapping names to observables. 

3) PageNameClientComponent.tsx (replace PageName) - a file with "use client" at the top, which contains a ServerDataReceiverComponent, named the same as the file, that will receive initial values from the server. For simple pages this file might also have all the displays needed, but if the page is more complex, we can create those components in separate files. This file also should export something like 

export const [PageNameContext, ProvidePageNameContext] = buildDataContext(
  pageNameDataFunction
)

This will allow child components to consume data from the given data function that is initially populated by the server, but then kept up to date in real time on the client. 

See [page.tsx](mdc:app/example/page.tsx), [ExamplePageClientComponent.tsx](mdc:app/example/ExamplePageClientComponent.tsx) and [examplePageDataFunctions.ts](mdc:app/example/examplePageDataFunctions.ts) for examples of each of the above.




