rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function currentUser() {
      return request.auth.uid;
    }

    function canRead(resource) {
      // If no permissions field exists, read is allowed
      return resource.data.get('permissions', null) == null ? 
             true : 
             isAuthenticated() && 
             currentUser() in resource.data.permissions &&
             resource.data.permissions[currentUser()] in ["read", "write", "admin"];
    }

    function canWrite(resource, isNewDoc) {
      // If no permissions field exists, write is allowed
      return (!("permissions" in resource.data) || resource.data.permissions == null) ? 
             true : 
             // User must be logged in to write
             !isAuthenticated() ? 
             false : 
             // Check if user has an entry in permissions
             !(currentUser() in resource.data.permissions) ? 
             false : 
             // If user has admin permission, they can write anything
             resource.data.permissions[currentUser()] == "admin" ? 
             true : 
             // If user has write permission
             resource.data.permissions[currentUser()] == "write" ? 
                // They can write anything for new docs or anything except permissions for existing
                isNewDoc ? 
                true : 
                !request.resource.data.diff(resource.data).affectedKeys().hasAny(['permissions']) : 
             // User doesn't have sufficient permission
             false;
    }

    // Apply permissions to all collections
    match /{collection}/{document=**} {
      allow read: if resource == null ? true : canRead(resource);
      allow write: if (resource == null) ?
                   (
                     // For new documents - must be authenticated
                     !isAuthenticated() ? 
                     false : 
                     // If no permissions are being set, allow the creation
                     (!("permissions" in request.resource.data) || request.resource.data.permissions == null) ? 
                     true : 
                     // If permissions are being set, the user must include themselves with appropriate permission
                     currentUser() in request.resource.data.permissions && 
                     request.resource.data.permissions[currentUser()] in ["write", "admin"]
                   ) : 
                   // For existing documents
                   canWrite(resource, false);
    }

    
  }
}